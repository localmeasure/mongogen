// +build ignore
// Code generated by MongoGen. DO NOT EDIT.
// Collection: users

package users

import (
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"context"
	"time"
)

type UserFilter struct {
	Filter bson.D
}

type Users struct {
	db *mongo.Database
}

func NewService(db *mongo.Database) *Users {
	return &Users{db}
}

func UserWithID(id primitive.ObjectID) UserFilter {
	return UserFilter{bson.D{{Key: "_id", Value: id}}}
}

func UserWithIDs(ids []primitive.ObjectID) UserFilter {
	return UserFilter{bson.D{{Key: "_id", Value: bson.M{"$in": ids}}}}
}

type useGroupIdName struct {
	groupId                 bson.M
	name                    bson.M
}

func UseGroupIdName() *useGroupIdName {
	return &useGroupIdName{groupId: bson.M{"$eq": 0}}
}

func (use *useGroupIdName) Filter() UserFilter {
	filter := bson.D{primitive.E{Key: "group_id", Value: use.groupId}}
	if use.name != nil {
	filter = append(filter, primitive.E{Key: "group_id", Value: use.groupId})
	}
	return UserFilter{filter}
}

func (use *useGroupIdName) WithGroupId(value primitive.ObjectID) *useGroupIdName {
	use.groupId = bson.M{"$eq": value}
	return use
}

func (use *useGroupIdName) WithGroupIdNe(value primitive.ObjectID) *useGroupIdName {
	use.groupId = bson.M{"$ne": value}
	return use
}

func (use *useGroupIdName) WithGroupIdIn(values primitive.ObjectID) *useGroupIdName {
	use.groupId = bson.M{"$in": values}
	return use
}

func (use *useGroupIdName) WithGroupIdNin(values primitive.ObjectID) *useGroupIdName {
	use.groupId = bson.M{"$nin": values}
	return use
}

func (use *useGroupIdName) WithGroupIdGt(value primitive.ObjectID) *useGroupIdName {
	use.groupId = bson.M{"$gt": value}
	return use
}

func (use *useGroupIdName) WithGroupIdGte(value primitive.ObjectID) *useGroupIdName {
	use.groupId = bson.M{"$gte": value}
	return use
}

func (use *useGroupIdName) WithGroupIdLt(value primitive.ObjectID) *useGroupIdName {
	use.groupId = bson.M{"$lt": value}
	return use
}

func (use *useGroupIdName) WithGroupIdLte(value primitive.ObjectID) *useGroupIdName {
	use.groupId = bson.M{"$lte": value}
	return use
}

func (use *useGroupIdName) WithName(value string) *useGroupIdName {
	use.name = bson.M{"$eq": value}
	return use
}

func (use *useGroupIdName) WithNameNe(value string) *useGroupIdName {
	use.name = bson.M{"$ne": value}
	return use
}

func (use *useGroupIdName) WithNameIn(values string) *useGroupIdName {
	use.name = bson.M{"$in": values}
	return use
}

func (use *useGroupIdName) WithNameNin(values string) *useGroupIdName {
	use.name = bson.M{"$nin": values}
	return use
}

type useTeamIdLastSeen struct {
	teamId                  bson.M
	lastSeen                bson.M
}

func UseTeamIdLastSeen() *useTeamIdLastSeen {
	return &useTeamIdLastSeen{teamId: bson.M{"$eq": 0}}
}

func (use *useTeamIdLastSeen) Filter() UserFilter {
	filter := bson.D{primitive.E{Key: "team_id", Value: use.teamId}}
	if use.lastSeen != nil {
	filter = append(filter, primitive.E{Key: "team_id", Value: use.teamId})
	}
	return UserFilter{filter}
}

func (use *useTeamIdLastSeen) WithTeamId(value primitive.ObjectID) *useTeamIdLastSeen {
	use.teamId = bson.M{"$eq": value}
	return use
}

func (use *useTeamIdLastSeen) WithTeamIdNe(value primitive.ObjectID) *useTeamIdLastSeen {
	use.teamId = bson.M{"$ne": value}
	return use
}

func (use *useTeamIdLastSeen) WithTeamIdIn(values primitive.ObjectID) *useTeamIdLastSeen {
	use.teamId = bson.M{"$in": values}
	return use
}

func (use *useTeamIdLastSeen) WithTeamIdNin(values primitive.ObjectID) *useTeamIdLastSeen {
	use.teamId = bson.M{"$nin": values}
	return use
}

func (use *useTeamIdLastSeen) WithTeamIdGt(value primitive.ObjectID) *useTeamIdLastSeen {
	use.teamId = bson.M{"$gt": value}
	return use
}

func (use *useTeamIdLastSeen) WithTeamIdGte(value primitive.ObjectID) *useTeamIdLastSeen {
	use.teamId = bson.M{"$gte": value}
	return use
}

func (use *useTeamIdLastSeen) WithTeamIdLt(value primitive.ObjectID) *useTeamIdLastSeen {
	use.teamId = bson.M{"$lt": value}
	return use
}

func (use *useTeamIdLastSeen) WithTeamIdLte(value primitive.ObjectID) *useTeamIdLastSeen {
	use.teamId = bson.M{"$lte": value}
	return use
}

func (use *useTeamIdLastSeen) WithLastSeenGt(value time.Time) *useTeamIdLastSeen {
	use.lastSeen = bson.M{"$gt": value}
	return use
}

func (use *useTeamIdLastSeen) WithLastSeenGte(value time.Time) *useTeamIdLastSeen {
	use.lastSeen = bson.M{"$gte": value}
	return use
}

func (use *useTeamIdLastSeen) WithLastSeenLt(value time.Time) *useTeamIdLastSeen {
	use.lastSeen = bson.M{"$lt": value}
	return use
}

func (use *useTeamIdLastSeen) WithLastSeenLte(value time.Time) *useTeamIdLastSeen {
	use.lastSeen = bson.M{"$lte": value}
	return use
}

func (s *Users) Find(ctx context.Context, filter UserFilter, opts ...*options.FindOptions) (*mongo.Cursor, error) {
	return s.db.Collection("users").Find(ctx, filter.Filter, opts...)
}

func (s *Users) FindWithIDs(ctx context.Context, ids []primitive.ObjectID, opts ...*options.FindOptions) (*mongo.Cursor, error) {
	return s.db.Collection("users").Find(ctx, bson.M{"_id": bson.M{"$in": ids}}, opts...)
}

func (s *Users) FindOne(ctx context.Context, filter UserFilter, opts ...*options.FindOneOptions) *mongo.SingleResult {
	return s.db.Collection("users").FindOne(ctx, filter.Filter, opts...)
}

func (s *Users) FindOneWithID(ctx context.Context, id primitive.ObjectID, opts ...*options.FindOneOptions) *mongo.SingleResult {
	return s.db.Collection("users").FindOne(ctx, bson.M{"_id": id}, opts...)
}

func (s *Users) Count(ctx context.Context, filter UserFilter, opts ...*options.CountOptions) (int64, error) {
	return s.db.Collection("users").CountDocuments(ctx, filter.Filter, opts...)
}
